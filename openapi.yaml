openapi: 3.1.0
info:
  title: Quiz App API
  version: 1.0.0
servers:
  - url: https://api.example.com/v1
    description: Production

tags:
  - name: Auth
    description: 인증 및 소셜 로그인
  - name: Users
    description: 사용자 프로필 관리
  - name: SocialAuth
    description: 소셜 계정 연동 관리
  - name: Consents
    description: 동의 내역 관리
  - name: Notifications
    description: 알림 설정 관리
  - name: Devices
    description: 디바이스 관리
  - name: Points
    description: 포인트 조회 및 거래 내역
  - name: Recharges
    description: 포인트 충전 관리
  - name: Rewards
    description: 리워드 주문 관리
  - name: Battles
    description: 배틀 생성 및 결과 관리
  - name: BattleParticipants
    description: 배틀 참가자 결과 기록
  - name: Announcements
    description: 공지사항 관리
  - name: AnnouncementReads
    description: 공지 읽음 처리
  - name: Support
    description: 고객센터 문의 관리

paths:

  ### Auth
  /auth/signup:
    post:
      tags: [Auth]
      summary: 이메일·비밀번호 회원가입
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /auth/login:
    post:
      tags: [Auth]
      summary: 로그인
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /auth/logout:
    post:
      tags: [Auth]
      summary: 로그아웃
      responses:
        '204':
          description: 로그아웃 완료

  /auth/refresh:
    post:
      tags: [Auth]
      summary: 토큰 재발급
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
      responses:
        '200':
          description: 재발급 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /auth/social:
    post:
      tags: [Auth]
      summary: 소셜 로그인/연동
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialAuthRequest'
      responses:
        '200':
          description: 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  ### Users
  /users/{user_id}:
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      tags: [Users]
      summary: 프로필 조회
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags: [Users]
      summary: 프로필 전체 수정
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      tags: [Users]
      summary: 프로필 일부 수정
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPartialUpdate'
      responses:
        '200':
          description: 일부 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags: [Users]
      summary: 계정 비활성화
      responses:
        '204':
          description: 비활성화 완료

  ### SocialAuth
  /users/{user_id}/social-auth:
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      tags: [SocialAuth]
      summary: 소셜 연동 목록 조회
      responses:
        '200':
          description: 목록 반환
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSocialAuth'
    post:
      tags: [SocialAuth]
      summary: 새 소셜 연동
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSocialAuthCreate'
      responses:
        '201':
          description: 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSocialAuth'

  /users/{user_id}/social-auth/{auth_id}:
    parameters:
      - $ref: '#/components/parameters/UserId'
      - name: auth_id
        in: path
        required: true
        schema:
          type: integer
    patch:
      tags: [SocialAuth]
      summary: 소셜 연동 수정
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                is_primary:
                  type: boolean
      responses:
        '200':
          description: 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSocialAuth'
    delete:
      tags: [SocialAuth]
      summary: 소셜 연동 해제
      responses:
        '204':
          description: 삭제 완료

  ### Consents
  /users/{user_id}/consents:
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      tags: [Consents]
      summary: 동의 내역 조회
      responses:
        '200':
          description: 목록 반환
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserConsent'
    post:
      tags: [Consents]
      summary: 동의/철회 기록 추가
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserConsentCreate'
      responses:
        '201':
          description: 추가 성공
    patch:
      tags: [Consents]
      summary: 동의 내역 수정
      parameters:
        - name: consent_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                agreed:
                  type: boolean
      responses:
        '200':
          description: 수정 성공

  ### Notifications
  /users/{user_id}/notifications:
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      tags: [Notifications]
      summary: 알림 설정 조회
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotification'
    patch:
      tags: [Notifications]
      summary: 알림 설정 토글/수정
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNotificationUpdate'
      responses:
        '200':
          description: 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotification'

  ### Devices
  /users/{user_id}/devices:
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      tags: [Devices]
      summary: 디바이스 목록 조회
      responses:
        '200':
          description: 목록 반환
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDevice'
    post:
      tags: [Devices]
      summary: 신규 디바이스 등록
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDeviceCreate'
      responses:
        '201':
          description: 등록 성공
  /users/{user_id}/devices/{device_id}:
    parameters:
      - $ref: '#/components/parameters/UserId'
      - name: device_id
        in: path
        required: true
        schema:
          type: string
    delete:
      tags: [Devices]
      summary: 디바이스 연결 해제
      responses:
        '204':
          description: 삭제 성공

  ### Points
  /users/{user_id}/points/balance:
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      tags: [Points]
      summary: 현재 포인트 잔액 조회
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: integer

    paths:
    /users/{user_id}/points/transactions:
      parameters:
        - $ref: '#/components/parameters/UserId'
        - name: type
          in: query
          schema:
            type: string
            enum:
              - CHARGE
              - REWARD

      get:
        tags:
          - Points
        responses:
          '200':
            description: 목록 반환
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/PointTransaction'


  ### Recharges
  /users/{user_id}/recharges:
    parameters:
      - $ref: '#/components/parameters/UserId'
    post:
      tags: [Recharges]
      summary: 충전 요청 생성
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RechargeCreate'
      responses:
        '201':
          description: 요청 생성
    get:
      tags: [Recharges]
      summary: 충전 내역 조회
      responses:
        '200':
          description: 목록 반환
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recharge'

  /users/{user_id}/recharges/{recharge_id}:
    parameters:
      - $ref: '#/components/parameters/UserId'
      - name: recharge_id
        in: path
        required: true
        schema:
          type: integer
    patch:
      tags: [Recharges]
      summary: 충전 상태 업데이트 (Webhook)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [PENDING, COMPLETED, FAILED]
      responses:
        '200':
          description: 업데이트 성공

  ### Rewards
  /rewards/items:
    get:
      tags: [Rewards]
      summary: 리워드 상품 카탈로그 조회
      responses:
        '200':
          description: 목록 반환
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RewardItem'

  /users/{user_id}/rewards:
    parameters:
      - $ref: '#/components/parameters/UserId'
    post:
      tags: [Rewards]
      summary: 리워드 주문 생성
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RewardOrderCreate'
      responses:
        '201':
          description: 주문 성공
    get:
      tags: [Rewards]
      summary: 주문 내역 조회
      responses:
        '200':
          description: 목록 반환
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RewardOrder'

  /users/{user_id}/rewards/{order_id}:
    parameters:
      - $ref: '#/components/parameters/UserId'
      - name: order_id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags: [Rewards]
      summary: 특정 주문 상세 조회
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardOrder'

  ### Battles
  /battles:
    post:
      tags: [Battles]
      summary: 배틀 생성 (PENDING)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BattleCreate'
      responses:
        '201':
          description: 생성 성공
  /battles/{battle_id}:
    parameters:
      - name: battle_id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags: [Battles]
      summary: 배틀 상태 조회
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Battle'
  /battles/{battle_id}/match:
    parameters:
      - name: battle_id
        in: path
        required: true
        schema:
          type: integer
    patch:
      tags: [Battles]
      summary: 매칭 완료 → ONGOING
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                started_at:
                  type: string
                  format: date-time
      responses:
        '200':
          description: 업데이트 성공
  /battles/{battle_id}/result:
    parameters:
      - name: battle_id
        in: path
        required: true
        schema:
          type: integer
    patch:
      tags: [Battles]
      summary: 승패 확정 → COMPLETED
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ended_at:
                  type: string
                  format: date-time
      responses:
        '200':
          description: 업데이트 성공

  ### BattleParticipants
  /battles/{battle_id}/participants:
    parameters:
      - name: battle_id
        in: path
        required: true
        schema:
          type: integer
    post:
      tags: [BattleParticipants]
      summary: MATCH 후 참가자 초기 등록
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BattleParticipantCreate'
      responses:
        '201':
          description: 등록 성공
  /battles/{battle_id}/participants/{user_id}/result:
    parameters:
      - name: battle_id
        in: path
        required: true
        schema:
          type: integer
      - $ref: '#/components/parameters/UserId'
    patch:
      tags: [BattleParticipants]
      summary: WIN/LOSS 결과 반영
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                outcome:
                  enum: [WIN, LOSS]
      responses:
        '200':
          description: 반영 성공
  /users/{user_id}/battles/stats:
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      tags: [BattleParticipants]
      summary: 승/패 요약 조회
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBattleStats'

  ### Announcements
  /announcements:
    get:
      tags: [Announcements]
      summary: 공지 목록 조회
      responses:
        '200':
          description: 목록 반환
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Announcement'
    post:
      tags: [Announcements]
      summary: 관리자용 공지 등록
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnouncementCreate'
      responses:
        '201':
          description: 생성 성공

  /announcements/{announcement_id}:
    parameters:
      - name: announcement_id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags: [Announcements]
      summary: 특정 공지 조회
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
    patch:
      tags: [Announcements]
      summary: 공지 수정
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnouncementUpdate'
      responses:
        '200':
          description: 수정 성공
    delete:
      tags: [Announcements]
      summary: 공지 아카이브(상태 업데이트)
      responses:
        '204':
          description: 아카이브 완료

  ### AnnouncementReads
  /announcements/{announcement_id}/reads:
    parameters:
      - name: announcement_id
        in: path
        required: true
        schema:
          type: integer
    post:
      tags: [AnnouncementReads]
      summary: 공지 읽음 기록 추가
      responses:
        '201':
          description: 기록 생성

  /users/{user_id}/announcements/reads:
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      tags: [AnnouncementReads]
      summary: 사용자가 읽은 공지 조회
      responses:
        '200':
          description: 목록 반환

  ### Support
  /users/{user_id}/tickets:
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      tags: [Support]
      summary: 티켓 목록 조회
      responses:
        '200':
          description: 목록 반환
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupportTicket'
    post:
      tags: [Support]
      summary: 새 티켓 생성
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupportTicketCreate'
      responses:
        '201':
          description: 생성 성공

  /users/{user_id}/tickets/{ticket_id}:
    parameters:
      - $ref: '#/components/parameters/UserId'
      - name: ticket_id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags: [Support]
      summary: 티켓 상세 조회
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportTicket'
    patch:
      tags: [Support]
      summary: 티켓 상태 수정
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupportTicketUpdate'
      responses:
        '200':
          description: 수정 성공

  /users/{user_id}/tickets/{ticket_id}/messages:
    parameters:
      - $ref: '#/components/parameters/UserId'
      - name: ticket_id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags: [Support]
      summary: 티켓 메시지 조회
      responses:
        '200':
          description: 목록 반환
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupportMessage'
    post:
      tags: [Support]
      summary: 티켓 메시지 추가
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupportMessageCreate'
      responses:
        '201':
          description: 추가 성공

components:
  parameters:
    UserId:
      name: user_id
      in: path
      required: true
      schema:
        type: integer

  schemas:
    SignupRequest:
      type: object
      required: [email,password,nickname]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        nickname:
          type: string

    LoginRequest:
      type: object
      required: [email,password]
      properties:
        email:
          type: string
        password:
          type: string

    SocialAuthRequest:
      type: object
      required: [provider,provider_user_id]
      properties:
        provider:
          type: string
        provider_user_id:
          type: string

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string

    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        nickname:
          type: string
        birth_date:
          type: string
          format: date
        gender:
          type: string
        status:
          type: string

    UserUpdate:
      allOf:
        - $ref: '#/components/schemas/User'
      required: [id]

    UserPartialUpdate:
      type: object
      properties:
        email:
          type: string
        nickname:
          type: string
        status:
          type: string

    UserSocialAuth:
      type: object
      properties:
        id:
          type: integer
        provider:
          type: string
        provider_user_id:
          type: string
        is_primary:
          type: boolean

    UserSocialAuthCreate:
      type: object
      required: [provider,provider_user_id]
      properties:
        provider:
          type: string
        provider_user_id:
          type: string

    UserConsent:
      type: object
      properties:
        id:
          type: integer
        consent_type:
          type: string
        agreed:
          type: boolean
        version:
          type: string

    UserConsentCreate:
      type: object
      required: [consent_type,agreed]
      properties:
        consent_type:
          type: string
        agreed:
          type: boolean
        version:
          type: string

    UserNotification:
      type: object
      properties:
        service_alert:
          type: boolean
        marketing_alert:
          type: boolean
        push_alert:
          type: boolean
        email_alert:
          type: boolean
        sms_alert:
          type: boolean

    UserNotificationUpdate:
      type: object
      properties:
        service_alert:
          type: boolean
        marketing_alert:
          type: boolean
        push_alert:
          type: boolean
        email_alert:
          type: boolean
        sms_alert:
          type: boolean

    UserDevice:
      type: object
      properties:
        id:
          type: integer
        device_id:
          type: string
        app_version:
          type: string
        os_type:
          type: string
        push_token:
          type: string

    UserDeviceCreate:
      type: object
      required: [device_id,push_token]
      properties:
        device_id:
          type: string
        app_version:
          type: string
        os_type:
          type: string
        push_token:
          type: string

    PointTransaction:
      type: object
      properties:
        tx_id:
          type: integer
        type:
          type: string
        title:
          type: string
        amount:
          type: integer
        balance_after:
          type: integer
        timestamp:
          type: string
          format: date-time

    RechargeCreate:
      type: object
      required: [amount]
      properties:
        amount:
          type: integer

    Recharge:
      type: object
      properties:
        id:
          type: integer
        amount:
          type: integer
        status:
          type: string
        external_tx_id:
          type: string
        requested_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time

    RewardItem:
      type: object
      properties:
        item_id:
          type: integer
        name:
          type: string
        cost_points:
          type: integer

    RewardOrderCreate:
      type: object
      required: [item_id,phone_to]
      properties:
        item_id:
          type: integer
        quantity:
          type: integer
        phone_to:
          type: string

    RewardOrder:
      type: object
      properties:
        order_id:
          type: integer
        item_id:
          type: integer
        cost_points:
          type: integer
        phone_to:
          type: string
        status:
          type: string

    BattleCreate:
      type: object
      required: [stake_points]
      properties:
        stake_points:
          type: integer

    Battle:
      type: object
      properties:
        battle_id:
          type: integer
        stake_points:
          type: integer
        status:
          type: string

    BattleParticipantCreate:
      type: object
      required: [user_id]
      properties:
        user_id:
          type: integer

    UserBattleStats:
      type: object
      properties:
        user_id:
          type: integer
        win_count:
          type: integer
        loss_count:
          type: integer

    Announcement:
      type: object
      properties:
        announcement_id:
          type: integer
        title:
          type: string
        content:
          type: string
        status:
          type: string

    AnnouncementCreate:
      type: object
      required: [title,content]
      properties:
        title:
          type: string
        content:
          type: string

    AnnouncementUpdate:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        status:
          type: string

    SupportTicket:
      type: object
      properties:
        ticket_id:
          type: integer
        subject:
          type: string
        status:
          type: string

    SupportTicketCreate:
      type: object
      required: [subject]
      properties:
        subject:
          type: string

    SupportTicketUpdate:
      type: object
      properties:
        status:
          type: string

    SupportMessage:
      type: object
      properties:
        message_id:
          type: integer
        sender_type:
          type: string
        message:
          type: string

    SupportMessageCreate:
      type: object
      required: [sender_type,message]
      properties:
        sender_type:
          type: string
        message:
          type: string
